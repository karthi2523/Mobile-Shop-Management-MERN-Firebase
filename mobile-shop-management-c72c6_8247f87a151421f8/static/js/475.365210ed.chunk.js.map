{"version":3,"file":"static/js/475.365210ed.chunk.js","mappings":"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","sources":["components/Signup.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { createUserWithEmailAndPassword, signOut } from \"firebase/auth\";\r\nimport { auth, db } from \"../firebase\";\r\nimport { setDoc, doc } from \"firebase/firestore\";\r\nimport {\r\n  Container,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  Box,\r\n  Link,\r\n  InputAdornment,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\"; \r\n\r\nconst Signup = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\"); \r\n  const [role, setRole] = useState(\"employee\"); // Default role\r\n  const [username, setUsername] = useState(\"\"); // State for username\r\n  const [error, setError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n  const [showPassword, setShowPassword] = useState(false); // State for password visibility\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false); // State for confirm password visibility\r\n  const navigate = useNavigate();\r\n\r\n  const handleSignup = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Check if password and confirm password match\r\n    if (password !== confirmPassword) {\r\n      setError(\"Passwords do not match.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n      const user = userCredential.user;\r\n\r\n      // Create a user document in Firestore with role and username\r\n      await setDoc(doc(db, \"users\", user.uid), {\r\n        email,\r\n        username, // Save the username in Firestore\r\n        role, // Save the role in Firestore\r\n      });\r\n\r\n      setSuccess(\"Signup successful! Redirecting to login...\");\r\n\r\n      // Sign out the user after signup\r\n      await signOut(auth);\r\n\r\n      // Redirect to login page\r\n      setTimeout(() => {\r\n        navigate(\"/login\");\r\n      }, 2000);\r\n    } catch (err) {\r\n      setError(\"Error signing up.\");\r\n      console.error(\"Error signing up:\", err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xs\" sx={{ padding: 4 }}>\r\n      <Typography variant=\"h5\" gutterBottom align=\"center\">\r\n        Signup\r\n      </Typography>\r\n      <form onSubmit={handleSignup}>\r\n        {/* Username Input */}\r\n        <TextField\r\n          label=\"Username\"\r\n          type=\"text\"\r\n          fullWidth\r\n          margin=\"normal\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          required\r\n        />\r\n\r\n        {/* Email Input */}\r\n        <TextField\r\n          label=\"Email\"\r\n          type=\"email\"\r\n          fullWidth\r\n          margin=\"normal\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n        />\r\n\r\n        {/* Password Input */}\r\n        <TextField\r\n          label=\"Password\"\r\n          type={showPassword ? \"text\" : \"password\"} // Toggle between text and password types\r\n          fullWidth\r\n          margin=\"normal\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  onClick={() => setShowPassword((prev) => !prev)} // Toggle password visibility\r\n                  edge=\"end\"\r\n                >\r\n                  {showPassword ? <VisibilityOff /> : <Visibility />} {/* Toggle the eye icon */}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n\r\n        {/* Confirm Password Input */}\r\n        <TextField\r\n          label=\"Confirm Password\"\r\n          type={showConfirmPassword ? \"text\" : \"password\"} // Toggle between text and password types\r\n          fullWidth\r\n          margin=\"normal\"\r\n          value={confirmPassword}\r\n          onChange={(e) => setConfirmPassword(e.target.value)}\r\n          required\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  onClick={() => setShowConfirmPassword((prev) => !prev)} // Toggle confirm password visibility\r\n                  edge=\"end\"\r\n                >\r\n                  {showConfirmPassword ? <VisibilityOff /> : <Visibility />} {/* Toggle the eye icon */}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n\r\n        {/* Role Selection */}\r\n        <FormControl fullWidth margin=\"normal\">\r\n          <InputLabel>Role</InputLabel>\r\n          <Select value={role} onChange={(e) => setRole(e.target.value)} label=\"Role\">\r\n            <MenuItem value=\"employee\">Employee</MenuItem>\r\n            <MenuItem value=\"manager\">Manager</MenuItem>\r\n            <MenuItem value=\"serviceMan\">Service Man</MenuItem>\r\n          </Select>\r\n          <FormHelperText>Select the user role</FormHelperText>\r\n        </FormControl>\r\n\r\n        {/* Submit Button */}\r\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\" fullWidth sx={{ marginTop: 2 }}>\r\n          Sign Up\r\n        </Button>\r\n\r\n        {/* Error Message */}\r\n        {error && (\r\n          <Box sx={{ marginTop: 2 }}>\r\n            <Typography color=\"error\" align=\"center\">\r\n              {error}\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Success Message */}\r\n        {success && (\r\n          <Box sx={{ marginTop: 2 }}>\r\n            <Typography color=\"primary\" align=\"center\">\r\n              {success}\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n      </form>\r\n\r\n      {/* Link to Login Page */}\r\n      <Box sx={{ marginTop: 2, textAlign: \"center\" }}>\r\n        <Typography variant=\"body2\">\r\n          Already have an account? <Link href=\"/login\">Login here</Link>\r\n        </Typography>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n"],"names":["Signup","email","setEmail","useState","password","setPassword","confirmPassword","setConfirmPassword","role","setRole","username","setUsername","error","setError","success","setSuccess","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","navigate","useNavigate","_jsxs","Container","maxWidth","sx","padding","children","_jsx","Typography","variant","gutterBottom","align","onSubmit","async","e","preventDefault","user","createUserWithEmailAndPassword","auth","setDoc","doc","db","uid","signOut","setTimeout","err","console","TextField","label","type","fullWidth","margin","value","onChange","target","required","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","prev","edge","VisibilityOff","Visibility","FormControl","InputLabel","Select","MenuItem","FormHelperText","Button","color","marginTop","Box","textAlign","Link","href"],"sourceRoot":""}