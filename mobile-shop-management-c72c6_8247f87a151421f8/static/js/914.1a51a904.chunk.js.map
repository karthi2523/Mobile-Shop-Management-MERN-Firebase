{"version":3,"file":"static/js/914.1a51a904.chunk.js","mappings":"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","sources":["components/StockOutSection.js","components/StockSection.js","components/SalesProgressSection.js","components/BillingSection.js","components/ServiceStatusSections.js","pages/ManagerDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from \"@mui/material\";\r\nimport { db } from \"../firebase\"; // Import Firebase Firestore (make sure to configure it)\r\nimport { collection, getDocs } from \"firebase/firestore\"; // Firestore methods\r\n\r\nconst StockOutSection = () => {\r\n  const [stockOutData, setStockOutData] = useState([]);\r\n\r\n  // Fetch stock-out data from Firestore\r\n  useEffect(() => {\r\n    const fetchStockOutData = async () => {\r\n      try {\r\n        const querySnapshot = await getDocs(collection(db, \"stockOut\"));\r\n        const stockOutItems = querySnapshot.docs.map((doc) => doc.data());\r\n        setStockOutData(stockOutItems);\r\n      } catch (error) {\r\n        console.error(\"Error fetching stock-out data: \", error);\r\n      }\r\n    };\r\n\r\n    fetchStockOutData();\r\n  }, []);\r\n\r\n  // Function to format the date as \"Day Month Year\" without time\r\n  const formatDate = (timestamp) => {\r\n    if (timestamp && timestamp.seconds) {\r\n      const date = new Date(timestamp.seconds * 1000); // Convert seconds to Date\r\n      return date.toLocaleDateString(\"en-GB\", { // UK format - Day Month Year\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        day: \"numeric\",\r\n      });\r\n    }\r\n    return \"N/A\"; // Fallback if timestamp is missing or invalid\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {stockOutData && stockOutData.length > 0 ? (\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Model</TableCell>\r\n                <TableCell>Quantity</TableCell>\r\n                <TableCell>To</TableCell>\r\n                <TableCell>Date</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {stockOutData.map((stockOutItem, index) => {\r\n                const timestamp = stockOutItem.timestamp || {}; // Fallback to empty object if no timestamp\r\n                const date = formatDate(timestamp); // Format the date without time\r\n\r\n                return (\r\n                  <TableRow key={index}>\r\n                    <TableCell>{stockOutItem.model}</TableCell>\r\n                    <TableCell>{stockOutItem.quantity}</TableCell>\r\n                    <TableCell>{stockOutItem.to}</TableCell>\r\n                    <TableCell>{date}</TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      ) : (\r\n        <p>No stock-out data available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockOutSection;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { db } from '../firebase';\r\nimport { collection, getDocs } from 'firebase/firestore'; // Firebase Firestore imports\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, FormControl, Select, MenuItem, InputLabel } from '@mui/material';\r\n\r\nconst StockSection = () => {\r\n  const [stockData, setStockData] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]); // Store filtered data\r\n  const [selectedOrganization, setSelectedOrganization] = useState(''); // Store selected organization for filtering\r\n\r\n  // Fetch stock data from Firestore on component mount\r\n  useEffect(() => {\r\n    const fetchStockData = async () => {\r\n      try {\r\n        const stockRef = collection(db, 'stockIn'); // Firestore collection reference\r\n        const stockSnapshot = await getDocs(stockRef); // Get all documents from stockIn collection\r\n        const stockList = stockSnapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        }));\r\n\r\n        setStockData(stockList); // Set state with the fetched data\r\n        setFilteredData(stockList); // Initially show all data\r\n      } catch (error) {\r\n        console.error('Error fetching stock data:', error);\r\n      }\r\n    };\r\n\r\n    fetchStockData();\r\n  }, []); // Empty dependency array ensures this runs once when component mounts\r\n\r\n  // Filter stock data by organization\r\n  useEffect(() => {\r\n    if (selectedOrganization) {\r\n      const filtered = stockData.filter(item => item.organization === selectedOrganization);\r\n      setFilteredData(filtered);\r\n    } else {\r\n      setFilteredData(stockData); // If no filter, show all data\r\n    }\r\n  }, [selectedOrganization, stockData]);\r\n\r\n  // Function to format the date (Date Month Year)\r\n  const formatDate = (timestamp) => {\r\n    if (timestamp && timestamp.seconds) {\r\n      const date = new Date(timestamp.seconds * 1000); // Convert seconds to milliseconds\r\n      return date.toLocaleDateString('en-GB'); // Format as Date Month Year (e.g., 18/12/2024)\r\n    }\r\n    return 'N/A'; // If no timestamp, show 'N/A'\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Organization Filter */}\r\n      <FormControl variant=\"outlined\" sx={{ minWidth: 120, marginBottom: 2 }}>\r\n        <InputLabel>Organization</InputLabel>\r\n        <Select\r\n          value={selectedOrganization}\r\n          onChange={(e) => setSelectedOrganization(e.target.value)}\r\n          label=\"Organization\"\r\n        >\r\n          <MenuItem value=\"\">All</MenuItem>\r\n          {/* Assuming organization names are stored in the stockData */}\r\n          {[...new Set(stockData.map((item) => item.organization))].map((org, index) => (\r\n            <MenuItem key={index} value={org}>{org}</MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n\r\n      {filteredData.length > 0 ? (\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Model</TableCell>\r\n                <TableCell>Organization</TableCell>\r\n                <TableCell>Date</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredData.map((stockItem) => {\r\n                const timestamp = stockItem.timestamp || {}; // Ensure timestamp is present\r\n                const date = formatDate(timestamp); // Format the date to Date Month Year\r\n\r\n                return (\r\n                  <TableRow key={stockItem.id}>\r\n                    <TableCell>{stockItem.model}</TableCell>\r\n                    <TableCell>{stockItem.organization}</TableCell>\r\n                    <TableCell>{date}</TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      ) : (\r\n        <p>No stock data available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockSection;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { collection, getDocs, query } from \"firebase/firestore\";\r\nimport { db } from \"../firebase\"; // Import your Firestore instance\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n} from \"@mui/material\";\r\nimport moment from \"moment\";\r\n\r\n// Function to format timestamp\r\nconst formatDate = (timestamp) => {\r\n  if (timestamp && timestamp.seconds) {\r\n    const date = new Date(timestamp.seconds * 1000); // Convert seconds to milliseconds\r\n    return moment(date).format(\"MMMM Do YYYY\"); // Format the date without the time using Moment.js\r\n  }\r\n  return \"Invalid Date\"; // Return a fallback if the timestamp is not valid\r\n};\r\n\r\nconst SalesProgressPage = () => {\r\n  const [salesData, setSalesData] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [employees, setEmployees] = useState([]); // Store employee data\r\n  const [filter, setFilter] = useState(\"\"); // Default no filter (empty string for all data)\r\n\r\n  // Fetch sales data from Firestore\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const querySnapshot = await getDocs(collection(db, \"salesProgress\"));\r\n        const data = querySnapshot.docs.map((doc) => ({\r\n          ...doc.data(),\r\n          id: doc.id,\r\n        }));\r\n        setSalesData(data);\r\n        setFilteredData(data); // Initially set all data\r\n      } catch (error) {\r\n        console.error(\"Error fetching sales data: \", error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Fetch employees from Firestore\r\n  useEffect(() => {\r\n    const fetchEmployees = async () => {\r\n      try {\r\n        const q = query(collection(db, \"users\")); // Fetch all users\r\n        const querySnapshot = await getDocs(q);\r\n        const employeesList = querySnapshot.docs.map((doc) => ({\r\n          ...doc.data(),\r\n          id: doc.id,\r\n        }));\r\n        setEmployees(employeesList);\r\n      } catch (error) {\r\n        console.error(\"Error fetching employees: \", error);\r\n      }\r\n    };\r\n    fetchEmployees();\r\n  }, []);\r\n\r\n  // Filter sales data based on purchaseMode (either \"Cash\" or \"Loan\")\r\n  useEffect(() => {\r\n    if (filter) {\r\n      const filtered = salesData.filter((sale) => sale.purchaseMode === filter);\r\n      setFilteredData(filtered);\r\n    } else {\r\n      setFilteredData(salesData); // If no filter, show all data\r\n    }\r\n  }, [filter, salesData]);\r\n\r\n  // Function to get employee details and username by matching username\r\n  const getEmployeeDetails = (sale) => {\r\n    // Ensure sale.username is trimmed and valid\r\n    const saleUsernameTrimmed = sale.username ? sale.username.trim() : \"\";\r\n    const employee = employees.find((emp) => {\r\n      const empUsernameTrimmed = emp.username ? emp.username.trim() : \"\"; // Trim the employee username\r\n      return empUsernameTrimmed === saleUsernameTrimmed; // Match by trimmed username\r\n    });\r\n\r\n    // Return employee's name and username or a fallback value if not found\r\n    return employee ? `${employee.username}` : \"No User\"; // Fallback to \"No User\" if not found\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Sales Progress\r\n      </Typography>\r\n\r\n      {/* Filter Dropdown */}\r\n      <FormControl variant=\"outlined\" sx={{ minWidth: 120, marginBottom: 2 }}>\r\n        <InputLabel>Purchase Mode</InputLabel>\r\n        <Select\r\n          value={filter}\r\n          onChange={(e) => setFilter(e.target.value)}\r\n          label=\"Purchase Mode\"\r\n        >\r\n          <MenuItem value=\"\">All</MenuItem>\r\n          <MenuItem value=\"Cash\">Cash</MenuItem>\r\n          <MenuItem value=\"Loan\">Loan</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n\r\n      {/* Sales Table */}\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell><strong>Date</strong></TableCell>\r\n              <TableCell><strong>Employee Name </strong></TableCell> {/* Updated header */}\r\n              {filter !== \"Cash\" && (\r\n                <>\r\n                  <TableCell><strong>Document Charge</strong></TableCell>\r\n                  <TableCell><strong>Initial Amount</strong></TableCell>\r\n                  <TableCell><strong>Loan Amount</strong></TableCell>\r\n                  <TableCell><strong>Loan Provider</strong></TableCell>\r\n                </>\r\n              )}\r\n              <TableCell><strong>Model Sold</strong></TableCell>\r\n              <TableCell><strong>Sales Amount</strong></TableCell>\r\n              <TableCell><strong>Sales Rate</strong></TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {filteredData.map((sale) => (\r\n              <TableRow key={sale.id}>\r\n                <TableCell>{formatDate(sale.date)}</TableCell> {/* Format the timestamp without time */}\r\n                <TableCell>{getEmployeeDetails(sale)}</TableCell> {/* Show employee name and username */}\r\n                \r\n                {filter !== \"Cash\" && (\r\n                  <>\r\n                    <TableCell>{sale.documentCharge}</TableCell>\r\n                    <TableCell>{sale.initialAmount}</TableCell>\r\n                    <TableCell>{sale.loanAmount}</TableCell>\r\n                    <TableCell>{sale.loanProvider}</TableCell>\r\n                  </>\r\n                )}\r\n                \r\n                <TableCell>{sale.modelSold}</TableCell>\r\n                <TableCell>{sale.salesAmount}</TableCell>\r\n                <TableCell>{sale.salesRate}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SalesProgressPage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  TextField,\r\n  Grid,\r\n  Button,\r\n  Typography,\r\n  Box,\r\n  Paper,\r\n  Divider,\r\n} from \"@mui/material\";\r\nimport html2pdf from \"html2pdf.js\";\r\n\r\nconst BillingSection = () => {\r\n  const [customerName, setCustomerName] = useState(\"\");\r\n  const [mobileModel, setMobileModel] = useState(\"\");\r\n  const [mobileRate, setMobileRate] = useState(\"\");\r\n  const [gstRate, setGstRate] = useState(\"\");\r\n  const [address, setAddress] = useState(\"\");\r\n  const [customerMobile, setCustomerMobile] = useState(\"\");\r\n  const [invoiceNumber, setInvoiceNumber] = useState(\"\");\r\n\r\n  // Generate and fetch invoice number\r\n  const generateInvoiceNumber = () => {\r\n    let currentInvoiceNumber = parseInt(localStorage.getItem(\"invoiceNumber\")) || 1;\r\n    currentInvoiceNumber++;\r\n    localStorage.setItem(\"invoiceNumber\", currentInvoiceNumber);\r\n    return String(currentInvoiceNumber).padStart(3, \"0\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    const number = generateInvoiceNumber();\r\n    setInvoiceNumber(number);\r\n  }, []);\r\n\r\n  const handleDownloadBill = () => {\r\n    const element = document.getElementById(\"bill\");\r\n    element.style.display = \"block\";\r\n\r\n    const formattedCustomerName = customerName.replace(/\\s+/g, \"_\").toLowerCase();\r\n    const opt = {\r\n      margin: [0.5, 1, 0.5, 1],\r\n      filename: `${formattedCustomerName}_invoice.pdf`,\r\n      image: { type: \"jpeg\", quality: 1 },\r\n      html2canvas: { scale: 2 },\r\n      jsPDF: { unit: \"in\", format: \"letter\", orientation: \"portrait\" },\r\n    };\r\n\r\n    html2pdf()\r\n      .from(element)\r\n      .set(opt)\r\n      .save()\r\n      .then(() => {\r\n        element.style.display = \"none\";\r\n      });\r\n  };\r\n\r\n  // Calculate GST details\r\n  const calculateGSTDetails = () => {\r\n    if (!mobileRate || !gstRate) return { baseAmount: \"0.00\", gstAmount: \"0.00\" };\r\n    const gstRateDecimal = parseFloat(gstRate) / 100;\r\n    const baseAmount = parseFloat(mobileRate) / (1 + gstRateDecimal);\r\n    const gstAmount = parseFloat(mobileRate) - baseAmount;\r\n    return {\r\n      baseAmount: baseAmount.toFixed(2),\r\n      gstAmount: gstAmount.toFixed(2),\r\n    };\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ padding: \"30px\", backgroundColor: \"#f9f9f9\" }}>\r\n      <Typography\r\n        variant=\"h4\"\r\n        sx={{ textAlign: \"center\", marginBottom: \"20px\", fontWeight: \"bold\", color: \"#333\" }}\r\n      >\r\n        Billing Section\r\n      </Typography>\r\n\r\n      <Grid container spacing={3} justifyContent=\"center\">\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <Card sx={{ boxShadow: 3 }}>\r\n            <CardContent>\r\n              <Typography\r\n                variant=\"h6\"\r\n                sx={{ marginBottom: \"15px\", textAlign: \"center\", fontWeight: \"bold\", color: \"#1976d2\" }}\r\n              >\r\n                Enter Customer Details\r\n              </Typography>\r\n\r\n              <TextField\r\n                label=\"Customer Name\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={customerName}\r\n                onChange={(e) => setCustomerName(e.target.value)}\r\n                sx={{ marginBottom: \"15px\" }}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Customer Mobile\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={customerMobile}\r\n                onChange={(e) => setCustomerMobile(e.target.value)}\r\n                sx={{ marginBottom: \"15px\" }}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Mobile Model\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={mobileModel}\r\n                onChange={(e) => setMobileModel(e.target.value)}\r\n                sx={{ marginBottom: \"15px\" }}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Mobile Rate (Incl. GST)\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={mobileRate}\r\n                onChange={(e) => setMobileRate(e.target.value)}\r\n                sx={{ marginBottom: \"15px\" }}\r\n              />\r\n\r\n              <TextField\r\n                label=\"GST Rate (%)\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={gstRate}\r\n                onChange={(e) => setGstRate(e.target.value)}\r\n                sx={{ marginBottom: \"15px\" }}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Customer Address\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={address}\r\n                onChange={(e) => setAddress(e.target.value)}\r\n                sx={{ marginBottom: \"15px\" }}\r\n              />\r\n\r\n              <Button variant=\"contained\" color=\"primary\" fullWidth onClick={handleDownloadBill}>\r\n                Download Bill\r\n              </Button>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Paper\r\n        id=\"bill\"\r\n        sx={{\r\n          padding: \"30px\",\r\n          marginTop: \"30px\",\r\n          borderRadius: \"8px\",\r\n          backgroundColor: \"#ffffff\",\r\n          boxShadow: 3,\r\n          display: \"none\",\r\n          maxWidth: \"800px\",\r\n          margin: \"0 auto\",\r\n        }}\r\n      >\r\n        <Box sx={{ marginBottom: \"30px\" }}>\r\n          <Typography variant=\"h5\" sx={{ fontWeight: \"bold\", textAlign: \"center\", color: \"#1976d2\" }}>\r\n            Mr Tamizha Mobiles\r\n          </Typography>\r\n          <Typography variant=\"body2\" sx={{ textAlign: \"center\", marginTop: \"10px\" }}>\r\n            KG Complex, SengunthaPuram Main Road\r\n            <br />\r\n            Karur, TamilNadu - 639001\r\n          </Typography>\r\n        </Box>\r\n\r\n        <Divider sx={{ marginBottom: \"20px\" }} />\r\n\r\n        <Box sx={{ display: \"flex\", justifyContent: \"space-between\", marginBottom: \"20px\" }}>\r\n          <Box>\r\n            <Typography variant=\"body1\">Invoice No: {invoiceNumber}</Typography>\r\n            <Typography variant=\"body1\">Invoice Date: {new Date().toLocaleDateString()}</Typography>\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body1\" sx={{ textAlign: \"right\" }}>GSTIN: 123456789012</Typography>\r\n          </Box>\r\n        </Box>\r\n\r\n        <Divider sx={{ marginBottom: \"20px\" }} />\r\n\r\n        <Box sx={{ marginBottom: \"20px\" }}>\r\n          <Typography variant=\"h6\" sx={{ fontWeight: \"bold\", color: \"#333\" }}>Bill To:</Typography>\r\n          <Typography variant=\"body1\" sx={{ marginTop: \"10px\" }}>\r\n            {customerName}\r\n            <br />\r\n            {address}\r\n            <br />\r\n            Mobile: {customerMobile}\r\n          </Typography>\r\n        </Box>\r\n\r\n        <Divider sx={{ marginBottom: \"20px\" }} />\r\n\r\n        <Box sx={{ marginBottom: \"20px\" }}>\r\n          <Typography variant=\"h6\" sx={{ fontWeight: \"bold\", color: \"#333\" }}>Items</Typography>\r\n          <table style={{ width: \"100%\", marginTop: \"15px\", borderCollapse: \"collapse\" }}>\r\n            <thead>\r\n              <tr>\r\n                <th style={{ borderBottom: \"1px solid #ccc\", textAlign: \"left\" }}>Items</th>\r\n                <th style={{ borderBottom: \"1px solid #ccc\", textAlign: \"right\" }}>Price (Incl. GST)</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>{mobileModel}</td>\r\n                <td style={{ textAlign: \"right\" }}>₹{mobileRate}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </Box>\r\n\r\n        <Divider sx={{ marginBottom: \"20px\" }} />\r\n\r\n        <Box sx={{ marginBottom: \"20px\" }}>\r\n          <table style={{ width: \"100%\", marginTop: \"15px\", borderCollapse: \"collapse\" }}>\r\n            <tr>\r\n              <td>Base Amount (Excl. GST):</td>\r\n              <td style={{ textAlign: \"right\" }}>₹{calculateGSTDetails().baseAmount}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>GST @ {gstRate}%:</td>\r\n              <td style={{ textAlign: \"right\" }}>₹{calculateGSTDetails().gstAmount}</td>\r\n            </tr>\r\n            <tr>\r\n              <td><strong>Net Total:</strong></td>\r\n              <td style={{ textAlign: \"right\" }}><strong>₹{mobileRate}</strong></td>\r\n            </tr>\r\n          </table>\r\n        </Box>\r\n\r\n        <Divider sx={{ marginBottom: \"20px\" }} />\r\n\r\n        <Box sx={{ textAlign: \"center\", marginTop: \"30px\" }}>\r\n          <Typography variant=\"body2\" sx={{ fontStyle: \"italic\" }}>\r\n            Thank you for your purchase! Terms and Conditions apply. No returns without a receipt.\r\n          </Typography>\r\n        </Box>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default BillingSection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { db } from \"../firebase\"; // Firebase configuration\r\nimport { collection, getDocs } from \"firebase/firestore\"; // Firestore functions\r\nimport { Grid, Card, CardContent, Typography, TextField, CircularProgress, Paper, Box, Divider } from \"@mui/material\";\r\nimport { Search } from \"@mui/icons-material\"; // Optional: Add search icon\r\n\r\nconst ServiceStatus = () => {\r\n  const [serviceRequests, setServiceRequests] = useState([]);\r\n  const [filteredRequests, setFilteredRequests] = useState([]); // For filtered results\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Track search input\r\n\r\n  // Fetch service requests from Firestore\r\n  const fetchServiceRequests = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const querySnapshot = await getDocs(collection(db, \"mobileServices\"));\r\n      const servicesList = [];\r\n      querySnapshot.forEach((doc) => {\r\n        const serviceData = doc.data();\r\n\r\n        // Determine password value based on passwordType\r\n        let passwordValue = \"Not Available\"; // Default value\r\n        const passwordType = serviceData.passwordType ? serviceData.passwordType.toLowerCase() : \"\";\r\n\r\n        switch (passwordType) {\r\n          case \"pin\":\r\n            passwordValue = serviceData.pin || \"Not Available\";\r\n            break;\r\n          case \"pattern\":\r\n            passwordValue = serviceData.pattern || \"Not Available\";\r\n            break;\r\n          case \"password\":\r\n            passwordValue = serviceData.password || \"Not Available\";\r\n            break;\r\n          default:\r\n            passwordValue = \"Not Available\";\r\n        }\r\n\r\n        servicesList.push({\r\n          id: doc.id,  // Firestore document ID\r\n          serviceId: serviceData.serviceId,\r\n          passwordType: serviceData.passwordType || \"Not Available\",\r\n          passwordValue: passwordValue,\r\n          advanceAmount: serviceData.advanceAmount || 0,\r\n          notes: serviceData.notes || \"No notes available\",\r\n          ...serviceData,\r\n        });\r\n      });\r\n      setServiceRequests(servicesList);\r\n      setFilteredRequests(servicesList); // Initialize filtered list\r\n    } catch (error) {\r\n      console.error(\"Error fetching service requests: \", error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // Filter service requests by customer name\r\n  const handleSearch = (e) => {\r\n    const query = e.target.value.toLowerCase();\r\n    setSearchQuery(query);\r\n    if (query === \"\") {\r\n      setFilteredRequests(serviceRequests); // Reset to all requests if search is cleared\r\n    } else {\r\n      const filtered = serviceRequests.filter((request) =>\r\n        request.customerName.toLowerCase().includes(query)\r\n      );\r\n      setFilteredRequests(filtered);\r\n    }\r\n  };\r\n\r\n  // Fetch service requests when the component mounts\r\n  useEffect(() => {\r\n    fetchServiceRequests();\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ p: 4, backgroundColor: \"#f5f5f5\", minHeight: \"100vh\" }}>\r\n      <Typography variant=\"h4\" gutterBottom color=\"primary\" fontWeight=\"bold\">\r\n        Service Requests\r\n      </Typography>\r\n\r\n      {/* Search Input */}\r\n      <Paper\r\n        elevation={3}\r\n        sx={{\r\n          p: 2,\r\n          mb: 4,\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          borderRadius: 2,\r\n          backgroundColor: \"#ffffff\",\r\n        }}\r\n      >\r\n        <Search sx={{ color: \"#b0bec5\", mr: 2 }} />\r\n        <TextField\r\n          label=\"Search by Customer Name\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          value={searchQuery}\r\n          onChange={handleSearch}\r\n          sx={{\r\n            borderRadius: 2,\r\n            backgroundColor: \"#f9f9f9\",\r\n            fontSize: \"16px\",\r\n            \"& .MuiOutlinedInput-root\": {\r\n              \"& fieldset\": {\r\n                borderColor: \"#d1d1d1\",\r\n              },\r\n              \"&:hover fieldset\": {\r\n                borderColor: \"#90caf9\",\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      </Paper>\r\n\r\n      {/* Loading Spinner */}\r\n      {loading ? (\r\n        <Grid container justifyContent=\"center\" sx={{ my: 4 }}>\r\n          <CircularProgress size={60} color=\"primary\" />\r\n        </Grid>\r\n      ) : filteredRequests.length === 0 ? (\r\n        <Typography variant=\"h6\" align=\"center\" color=\"textSecondary\" sx={{ my: 4 }}>\r\n          No service requests found.\r\n        </Typography>\r\n      ) : (\r\n        <Grid container spacing={3}>\r\n          {filteredRequests.map((service) => (\r\n            <Grid item xs={12} sm={6} md={4} key={service.id}>\r\n              <Card\r\n                variant=\"outlined\"\r\n                sx={{\r\n                  backgroundColor: service.status === \"Completed\" ? \"#e3f2fd\" : \"#ffffff\",\r\n                  borderRadius: 2,\r\n                  boxShadow: \"0px 4px 10px rgba(0, 0, 0, 0.08)\",\r\n                  padding: 3,\r\n                  transition: \"transform 0.2s ease-in-out\",\r\n                  cursor: \"pointer\",\r\n                  \"&:hover\": {\r\n                    transform: \"scale(1.05)\",\r\n                  },\r\n                }}\r\n              >\r\n                <CardContent>\r\n                  <Typography\r\n                    variant=\"h6\"\r\n                    color=\"primary\"\r\n                    fontWeight=\"bold\"\r\n                    sx={{ mb: 2 }}\r\n                  >\r\n                    Service ID: {service.serviceId || \"Not Available\"}\r\n                  </Typography>\r\n\r\n                  {/* Customer Info Section */}\r\n                  <Box sx={{ backgroundColor: \"#e8f5e9\", borderRadius: 1, p: 2, mb: 3 }}>\r\n                    <Typography variant=\"h5\" fontWeight=\"bold\" sx={{ mb: 1 }}>\r\n                      {service.customerName}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 1 }}>\r\n                      <strong>Address:</strong> {service.customerAddress}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 1 }}>\r\n                      <strong>Mobile:</strong> {service.customerMobile}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 1 }}>\r\n                      <strong>Mobile Model:</strong> {service.mobileModel}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 1 }}>\r\n                      <strong>Service Type:</strong> {service.serviceType}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      <strong>Estimated Amount:</strong> ₹{service.estimatedAmount}\r\n                    </Typography>\r\n                  </Box>\r\n\r\n                  <Divider sx={{ mb: 2 }} />\r\n\r\n                  {/* Service Status */}\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    sx={{\r\n                      color: service.status === \"Completed\" ? \"#66bb6a\" : \"#ffb300\",\r\n                      fontWeight: \"bold\",\r\n                      textTransform: \"uppercase\",\r\n                      fontSize: \"14px\",\r\n                    }}\r\n                  >\r\n                    <strong>Status:</strong> {service.status}\r\n                  </Typography>\r\n\r\n                  {/* Password Type and Value */}\r\n                  <Typography variant=\"body2\" color=\"textSecondary\" sx={{ my: 2 }}>\r\n                    <strong>Password Type:</strong> {service.passwordType || \"Not Available\"}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\r\n                    <strong>Password:</strong> {service.passwordValue}\r\n                  </Typography>\r\n\r\n                  {/* Advance Amount */}\r\n                  <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\r\n                    <strong>Advance Amount:</strong> ₹{service.advanceAmount}\r\n                  </Typography>\r\n\r\n                  {/* Notes */}\r\n                  <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    <strong>Notes:</strong> {service.notes}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ServiceStatus;\r\n","\r\nimport React, { useState } from \"react\";\r\nimport { signOut } from \"firebase/auth\";\r\nimport { auth } from \"../firebase\"; \r\nimport StockSection from \"../components/StockSection\";\r\nimport StockOutSection from \"../components/StockOutSection\";\r\nimport SalesProgressSection from \"../components/SalesProgressSection\";\r\nimport BillingSection from \"../components/BillingSection\";\r\nimport ServiceStatus from \"../components/ServiceStatusSections\";\r\nimport { Button, Box, Typography, Paper, Container, Grid, Avatar, IconButton } from \"@mui/material\";\r\nimport { ExitToApp } from \"@mui/icons-material\";\r\n\r\nconst ManagerDashboard = () => {\r\n  const [activeSection, setActiveSection] = useState(\"stock\");\r\n\r\n  \r\n  const handleSignOut = async () => {\r\n    try {\r\n      await signOut(auth); \r\n      console.log(\"User signed out successfully\");\r\n      window.location.href = \"/login\"; \r\n    } catch (error) {\r\n      console.error(\"Error signing out:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      {/* Manager Info Section */}\r\n      <Box my={3} display=\"flex\" alignItems=\"center\">\r\n        <Avatar sx={{ width: 56, height: 56, mr: 2 }} />\r\n        <Typography variant=\"h4\">Manager Dashboard</Typography>\r\n        <IconButton color=\"primary\" onClick={handleSignOut} sx={{ color: \"#555\" }}>\r\n                          <ExitToApp />\r\n                        </IconButton>\r\n      </Box>\r\n\r\n      {/* Buttons to switch between sections */}\r\n      <Box mb={3}>\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            <Button\r\n              variant={activeSection === \"stock\" ? \"contained\" : \"outlined\"}\r\n              color=\"primary\"\r\n              fullWidth\r\n              onClick={() => setActiveSection(\"stock\")}\r\n            >\r\n              Stock\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant={activeSection === \"stockOut\" ? \"contained\" : \"outlined\"}\r\n              color=\"primary\"\r\n              fullWidth\r\n              onClick={() => setActiveSection(\"stockOut\")}\r\n            >\r\n              Stock Out\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant={activeSection === \"salesProgress\" ? \"contained\" : \"outlined\"}\r\n              color=\"primary\"\r\n              fullWidth\r\n              onClick={() => setActiveSection(\"salesProgress\")}\r\n            >\r\n              Sales Progress\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant={activeSection === \"billing\" ? \"contained\" : \"outlined\"}\r\n              color=\"primary\"\r\n              fullWidth\r\n              onClick={() => setActiveSection(\"billing\")}\r\n            >\r\n              Billing\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant={activeSection === \"serviceStatus\" ? \"contained\" : \"outlined\"}\r\n              color=\"primary\"\r\n              fullWidth\r\n              onClick={() => setActiveSection(\"serviceStatus\")}\r\n            >\r\n              Service Status\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n\r\n      {/* Conditional Rendering of Sections based on activeSection */}\r\n      <Paper elevation={3} sx={{ p: 3, mb: 3 }}>\r\n        {activeSection === \"stock\" && <StockSection />}\r\n        {activeSection === \"stockOut\" && <StockOutSection />}\r\n        {activeSection === \"salesProgress\" && <SalesProgressSection />}\r\n        {activeSection === \"billing\" && <BillingSection />}\r\n        {activeSection === \"serviceStatus\" && <ServiceStatus />}\r\n      </Paper>\r\n\r\n      {/* Sign-out Button */}\r\n       <Box sx={{ marginTop: 2, textAlign: \"center\" }}>\r\n              <IconButton color=\"primary\" onClick={handleSignOut}>\r\n                <ExitToApp />\r\n                <Typography variant=\"button\">Sign Out</Typography>\r\n              </IconButton>\r\n            </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ManagerDashboard;\r\n"],"names":["StockOutSection","stockOutData","setStockOutData","useState","useEffect","async","stockOutItems","getDocs","collection","db","docs","map","doc","data","error","console","fetchStockOutData","_jsx","children","length","TableContainer","component","Paper","_jsxs","Table","TableHead","TableRow","TableCell","TableBody","stockOutItem","index","date","timestamp","seconds","Date","toLocaleDateString","year","month","day","formatDate","model","quantity","to","StockSection","stockData","setStockData","filteredData","setFilteredData","selectedOrganization","setSelectedOrganization","stockRef","stockList","_objectSpread","id","fetchStockData","filtered","filter","item","organization","FormControl","variant","sx","minWidth","marginBottom","InputLabel","Select","value","onChange","e","target","label","MenuItem","Set","org","stockItem","moment","format","SalesProgressPage","salesData","setSalesData","employees","setEmployees","setFilter","fetchData","q","query","employeesList","fetchEmployees","sale","purchaseMode","getEmployeeDetails","saleUsernameTrimmed","username","trim","employee","find","emp","concat","Typography","gutterBottom","_Fragment","documentCharge","initialAmount","loanAmount","loanProvider","modelSold","salesAmount","salesRate","BillingSection","customerName","setCustomerName","mobileModel","setMobileModel","mobileRate","setMobileRate","gstRate","setGstRate","address","setAddress","customerMobile","setCustomerMobile","invoiceNumber","setInvoiceNumber","number","generateInvoiceNumber","currentInvoiceNumber","parseInt","localStorage","getItem","setItem","String","padStart","calculateGSTDetails","baseAmount","gstAmount","gstRateDecimal","parseFloat","toFixed","Box","padding","backgroundColor","textAlign","fontWeight","color","Grid","container","spacing","justifyContent","xs","sm","md","Card","boxShadow","CardContent","TextField","fullWidth","Button","onClick","handleDownloadBill","element","document","getElementById","style","display","formattedCustomerName","replace","toLowerCase","opt","margin","filename","image","type","quality","html2canvas","scale","jsPDF","unit","orientation","html2pdf","from","set","save","then","marginTop","borderRadius","maxWidth","Divider","width","borderCollapse","borderBottom","fontStyle","ServiceStatus","serviceRequests","setServiceRequests","filteredRequests","setFilteredRequests","loading","setLoading","searchQuery","setSearchQuery","querySnapshot","servicesList","forEach","serviceData","passwordValue","passwordType","pin","pattern","password","push","serviceId","advanceAmount","notes","fetchServiceRequests","p","minHeight","elevation","mb","alignItems","Search","mr","request","includes","fontSize","borderColor","my","CircularProgress","size","align","service","status","transition","cursor","transform","customerAddress","serviceType","estimatedAmount","textTransform","ManagerDashboard","activeSection","setActiveSection","handleSignOut","signOut","auth","log","window","location","href","Container","Avatar","height","IconButton","ExitToApp","SalesProgressSection"],"sourceRoot":""}