{"version":3,"file":"static/js/460.2f1c2254.chunk.js","mappings":"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","sources":["components/StockSection.js","pages/StockPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { db } from '../firebase';\r\nimport { collection, getDocs } from 'firebase/firestore'; // Firebase Firestore imports\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, FormControl, Select, MenuItem, InputLabel } from '@mui/material';\r\n\r\nconst StockSection = () => {\r\n  const [stockData, setStockData] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]); // Store filtered data\r\n  const [selectedOrganization, setSelectedOrganization] = useState(''); // Store selected organization for filtering\r\n\r\n  // Fetch stock data from Firestore on component mount\r\n  useEffect(() => {\r\n    const fetchStockData = async () => {\r\n      try {\r\n        const stockRef = collection(db, 'stockIn'); // Firestore collection reference\r\n        const stockSnapshot = await getDocs(stockRef); // Get all documents from stockIn collection\r\n        const stockList = stockSnapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        }));\r\n\r\n        setStockData(stockList); // Set state with the fetched data\r\n        setFilteredData(stockList); // Initially show all data\r\n      } catch (error) {\r\n        console.error('Error fetching stock data:', error);\r\n      }\r\n    };\r\n\r\n    fetchStockData();\r\n  }, []); // Empty dependency array ensures this runs once when component mounts\r\n\r\n  // Filter stock data by organization\r\n  useEffect(() => {\r\n    if (selectedOrganization) {\r\n      const filtered = stockData.filter(item => item.organization === selectedOrganization);\r\n      setFilteredData(filtered);\r\n    } else {\r\n      setFilteredData(stockData); // If no filter, show all data\r\n    }\r\n  }, [selectedOrganization, stockData]);\r\n\r\n  // Function to format the date (Date Month Year)\r\n  const formatDate = (timestamp) => {\r\n    if (timestamp && timestamp.seconds) {\r\n      const date = new Date(timestamp.seconds * 1000); // Convert seconds to milliseconds\r\n      return date.toLocaleDateString('en-GB'); // Format as Date Month Year (e.g., 18/12/2024)\r\n    }\r\n    return 'N/A'; // If no timestamp, show 'N/A'\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Organization Filter */}\r\n      <FormControl variant=\"outlined\" sx={{ minWidth: 120, marginBottom: 2 }}>\r\n        <InputLabel>Organization</InputLabel>\r\n        <Select\r\n          value={selectedOrganization}\r\n          onChange={(e) => setSelectedOrganization(e.target.value)}\r\n          label=\"Organization\"\r\n        >\r\n          <MenuItem value=\"\">All</MenuItem>\r\n          {/* Assuming organization names are stored in the stockData */}\r\n          {[...new Set(stockData.map((item) => item.organization))].map((org, index) => (\r\n            <MenuItem key={index} value={org}>{org}</MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n\r\n      {filteredData.length > 0 ? (\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Model</TableCell>\r\n                <TableCell>Organization</TableCell>\r\n                <TableCell>Date</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredData.map((stockItem) => {\r\n                const timestamp = stockItem.timestamp || {}; // Ensure timestamp is present\r\n                const date = formatDate(timestamp); // Format the date to Date Month Year\r\n\r\n                return (\r\n                  <TableRow key={stockItem.id}>\r\n                    <TableCell>{stockItem.model}</TableCell>\r\n                    <TableCell>{stockItem.organization}</TableCell>\r\n                    <TableCell>{date}</TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      ) : (\r\n        <p>No stock data available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockSection;\r\n","import React from 'react';\r\nimport { Container, Typography } from '@mui/material';\r\nimport StockSection from '../components/StockSection';\r\n\r\nfunction StockPage() {\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"h4\" gutterBottom align=\"center\" color=\"primary\" sx={{ fontWeight: 'bold', marginTop: 5 }}>\r\n        Stock Information\r\n      </Typography>\r\n      <StockSection />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default StockPage;\r\n"],"names":["StockSection","stockData","setStockData","useState","filteredData","setFilteredData","selectedOrganization","setSelectedOrganization","useEffect","async","stockRef","collection","db","stockList","getDocs","docs","map","doc","_objectSpread","id","data","error","console","fetchStockData","filtered","filter","item","organization","_jsxs","children","FormControl","variant","sx","minWidth","marginBottom","_jsx","InputLabel","Select","value","onChange","e","target","label","MenuItem","Set","org","index","length","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","stockItem","date","timestamp","seconds","Date","toLocaleDateString","formatDate","model","Container","Typography","gutterBottom","align","color","fontWeight","marginTop"],"sourceRoot":""}