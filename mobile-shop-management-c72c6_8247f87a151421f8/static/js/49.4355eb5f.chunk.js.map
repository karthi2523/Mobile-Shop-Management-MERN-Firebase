{"version":3,"file":"static/js/49.4355eb5f.chunk.js","mappings":"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","sources":["pages/EmployeeDashboard.js","../node_modules/@mui/icons-material/esm/ExitToApp.js","../node_modules/@mui/material/CardActions/cardActionsClasses.js","../node_modules/@mui/material/CardActions/CardActions.js","../node_modules/@mui/material/IconButton/iconButtonClasses.js","../node_modules/@mui/material/IconButton/IconButton.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControl,\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Grid,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { db } from \"../firebase\";\r\nimport { collection, addDoc, Timestamp, doc, getDoc} from \"firebase/firestore\";\r\nimport { getAuth, signOut } from \"firebase/auth\";\r\nimport { ExitToApp } from \"@mui/icons-material\";\r\n\r\n\r\nfunction EmployeeDashboard() {\r\n  const navigate = useNavigate();\r\n\r\n  // General states\r\n  const [stockModel, setStockModel] = useState(\"\");\r\n  const [organization, setOrganization] = useState(\"\");\r\n  const [salesDate, setSalesDate] = useState(\"\");\r\n  const [salesAmount, setSalesAmount] = useState(\"\");\r\n  const [stockOutModel, setStockOutModel] = useState(\"\");\r\n  const [stockOutTo, setStockOutTo] = useState(\"\");\r\n  const [salesModelSold, setSalesModelSold] = useState(\"\");\r\n  const [salesRate, setSalesRate] = useState(\"\");\r\n  const [purchaseMode, setPurchaseMode] = useState(\"\");\r\n  const [loanProvider, setLoanProvider] = useState(\"\");\r\n  const [initialAmount, setInitialAmount] = useState(\"\");\r\n  const [documentCharge, setDocumentCharge] = useState(\"\");\r\n  const [loanAmount, setLoanAmount] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\"); // State for username\r\n  const [loading, setLoading] = useState(true); // Loading state\r\n\r\n  // Mobile service states\r\n  const [customerName, setCustomerName] = useState(\"\");\r\n  const [customerMobile, setCustomerMobile] = useState(\"\");\r\n  const [mobileModel, setMobileModel] = useState(\"\");\r\n  const [serviceType, setServiceType] = useState(\"\");\r\n  const [estimatedAmount, setEstimatedAmount] = useState(\"\");\r\n  const [customerAddress, setCustomerAddress] = useState(\"\");\r\n  const [notes, setNotes] = useState('');\r\n\r\n\r\n  // Password fields states\r\n  const [passwordType, setPasswordType] = useState(\"\"); // For selecting the password type\r\n  const [pin, setPin] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [pattern, setPattern] = useState(\"\");\r\n  \r\n  // Advance amount field\r\n  const [advanceAmount, setAdvanceAmount] = useState(\"\");\r\n\r\n  const resetError = () => setError(\"\");\r\n\r\n  const fetchEmployeeDetails = async () => {\r\n    const auth = getAuth();\r\n    const user = auth.currentUser;\r\n    if (user) {\r\n      const userDocRef = doc(db, \"users\", user.uid); \r\n      try {\r\n        const userDoc = await getDoc(userDocRef);\r\n        if (userDoc.exists()) {\r\n          const userData = userDoc.data(); \r\n          setUsername(userData.username); \r\n        } else {\r\n          setError(\"User not found\");\r\n        }\r\n      } catch (err) {\r\n        setError(\"Error fetching user details\");\r\n      }\r\n    }\r\n    setLoading(false); \r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEmployeeDetails();\r\n  }, []);\r\n\r\n  const handleAddStock = async () => {\r\n    resetError();\r\n    if (!stockModel || !organization) {\r\n      setError(\"All fields are required for adding stock.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const stockRef = collection(db, \"stockIn\");\r\n      const payload = {\r\n        model: stockModel,\r\n        organization: organization,\r\n        username, \r\n        timestamp: Timestamp.now(),\r\n      };\r\n      await addDoc(stockRef, payload);\r\n\r\n      setStockModel(\"\");\r\n      setOrganization(\"\");\r\n      alert(\"Stock added successfully!\");\r\n    } catch (err) {\r\n      setError(`Error: ${err.message}`);\r\n    }\r\n  };\r\n\r\n  const handleSalesProgress = async () => {\r\n    resetError();\r\n    if (\r\n      !salesDate ||\r\n      !salesAmount ||\r\n      !salesModelSold ||\r\n      !salesRate ||\r\n      !purchaseMode\r\n    ) {\r\n      setError(\"Date, sales model, sales amount, rate, and purchase mode are required.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const salesRef = collection(db, \"salesProgress\");\r\n      const payload = {\r\n        date: new Date(salesDate),\r\n        modelSold: salesModelSold,\r\n        salesAmount: parseFloat(salesAmount),\r\n        salesRate: parseFloat(salesRate),\r\n        purchaseMode: purchaseMode,\r\n        username,\r\n        ...(purchaseMode === \"Loan\" && {\r\n          loanProvider,\r\n          initialAmount: parseFloat(initialAmount),\r\n          documentCharge: parseFloat(documentCharge),\r\n          loanAmount: parseFloat(loanAmount),\r\n        }),\r\n        timestamp: Timestamp.now(),\r\n      };\r\n\r\n      await addDoc(salesRef, payload);\r\n\r\n      setSalesDate(\"\");\r\n      setSalesAmount(\"\");\r\n      setSalesModelSold(\"\");\r\n      setSalesRate(\"\");\r\n      setPurchaseMode(\"\");\r\n      setLoanProvider(\"\");\r\n      setInitialAmount(\"\");\r\n      setDocumentCharge(\"\");\r\n      setLoanAmount(\"\");\r\n      alert(\"Sales progress updated successfully!\");\r\n    } catch (err) {\r\n      setError(`Error: ${err.message}`);\r\n    }\r\n  };\r\n\r\n  const handleStockOut = async () => {\r\n    resetError();\r\n    if (!stockOutModel || !stockOutTo || !salesAmount) {  \r\n      setError(\"Stock model, destination, and quantity are required.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const stockOutRef = collection(db, \"stockOut\");\r\n      const payload = {\r\n        model: stockOutModel,\r\n        to: stockOutTo,\r\n        quantity: parseInt(salesAmount), \r\n        username, \r\n        timestamp: Timestamp.now(),\r\n      };\r\n      await addDoc(stockOutRef, payload);\r\n\r\n      setStockOutModel(\"\");\r\n      setStockOutTo(\"\");\r\n      setSalesAmount(\"\"); \r\n      alert(\"Stock out logged successfully!\");\r\n    } catch (err) {\r\n      setError(`Error: ${err.message}`);\r\n    }\r\n  };\r\n\r\n  const handleServiceDetails = async () => {\r\n    resetError();\r\n    if (!customerName || !customerMobile || !mobileModel || !serviceType || !estimatedAmount || !customerAddress || !advanceAmount) {\r\n      setError(\"All fields are required for adding service details.\");\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      const serviceDetails = {\r\n        customerName,\r\n        customerMobile,\r\n        mobileModel,\r\n        serviceType,\r\n        estimatedAmount: parseFloat(estimatedAmount),\r\n        customerAddress,\r\n        advanceAmount: parseFloat(advanceAmount),\r\n        username,\r\n        passwordType, // Include password type and password field values\r\n        pin,\r\n        password,\r\n        pattern,\r\n        notes,\r\n        timestamp: Timestamp.now(),\r\n      };\r\n  \r\n      const serviceId = generateServiceId();\r\n      await addDoc(collection(db, \"mobileServices\"), { serviceId, ...serviceDetails });\r\n      alert(`Service added successfully! Service ID: ${serviceId}`);\r\n  \r\n      setCustomerName(\"\");\r\n      setCustomerMobile(\"\");\r\n      setMobileModel(\"\");\r\n      setServiceType(\"\");\r\n      setEstimatedAmount(\"\");\r\n      setCustomerAddress(\"\");\r\n      setAdvanceAmount(\"\");\r\n      setPasswordType(\"\");\r\n      setPin(\"\");\r\n      setPassword(\"\");\r\n      setPattern(\"\");\r\n      setNotes(\"\")\r\n    } catch (err) {\r\n      setError(`Error: ${err.message}`);\r\n    }\r\n  };\r\n  \r\n  const generateServiceId = () => {\r\n    // Logic to generate a unique service ID\r\n    return `${Date.now()}`; // Example: Generates a timestamp-based ID\r\n  };\r\n\r\n \r\n\r\n  const handleSignOut = async () => {\r\n    try {\r\n      const auth = getAuth();\r\n      await signOut(auth);\r\n      navigate(\"/login\");\r\n    } catch (err) {\r\n      setError(\"Error signing out. Please try again.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Typography variant=\"h4\" gutterBottom align=\"center\" sx={{ marginTop: 4 }}>\r\n        Employee Dashboard\r\n      </Typography>\r\n\r\n      {/* Display username or loading message */}\r\n      <Box sx={{ marginBottom: 3, textAlign: \"center\" }}>\r\n        <Typography variant=\"h6\">\r\n          Welcome, {loading ? \"Loading...\" : username}\r\n        </Typography>\r\n        <IconButton color=\"primary\" onClick={handleSignOut} sx={{ color: \"#555\" }}>\r\n                  <ExitToApp />\r\n                </IconButton>\r\n        \r\n      </Box>\r\n\r\n      {error && <Typography color=\"error\" align=\"center\" sx={{ marginBottom: 2 }}>{error}</Typography>}\r\n\r\n    \r\n      <Grid container spacing={3} sx={{ marginTop: 3 }}>\r\n        \r\n        {/* <Grid item xs={12} sm={6} md={4}>\r\n          <Card variant=\"outlined\">\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>Add Stock</Typography>\r\n              <TextField\r\n                label=\"Stock Model\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                value={stockModel}\r\n                onChange={(e) => setStockModel(e.target.value)}\r\n                variant=\"outlined\"\r\n              />\r\n              <FormControl fullWidth margin=\"normal\">\r\n                <TextField\r\n                  label=\"From\"\r\n                  value={organization}\r\n                  onChange={(e) => setOrganization(e.target.value)}\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                />\r\n              </FormControl>\r\n            </CardContent>\r\n            <CardActions>\r\n              <Button variant=\"contained\" color=\"primary\" fullWidth onClick={handleAddStock}>\r\n                Add Stock\r\n              </Button>\r\n            </CardActions>\r\n          </Card>\r\n        </Grid> */}\r\n\r\n        \r\n        {/* <Grid item xs={12} sm={6} md={4}>\r\n      <Card variant=\"outlined\">\r\n        <CardContent>\r\n          <Typography variant=\"h6\" gutterBottom>Update Sales Progress</Typography>\r\n          <TextField\r\n            label=\"Date\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            type=\"date\"\r\n            value={salesDate}\r\n            onChange={(e) => setSalesDate(e.target.value)}\r\n            InputLabelProps={{ shrink: true }}\r\n            variant=\"outlined\"\r\n          />\r\n          <TextField\r\n            label=\"Sales Model Sold\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            value={salesModelSold}\r\n            onChange={(e) => setSalesModelSold(e.target.value)}\r\n            variant=\"outlined\"\r\n          />\r\n          <TextField\r\n            label=\"Sales Amount\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            type=\"number\"\r\n            value={salesAmount}\r\n            onChange={(e) => setSalesAmount(e.target.value)}\r\n            variant=\"outlined\"\r\n          />\r\n          <TextField\r\n            label=\"Sales Rate\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            type=\"number\"\r\n            value={salesRate}\r\n            onChange={(e) => setSalesRate(e.target.value)}\r\n            variant=\"outlined\"\r\n          />\r\n          <FormControl fullWidth margin=\"normal\">\r\n            <InputLabel>Mode of Purchase</InputLabel>\r\n            <Select\r\n              value={purchaseMode}\r\n              onChange={(e) => setPurchaseMode(e.target.value)}\r\n              fullWidth\r\n            >\r\n              <MenuItem value=\"Cash\">Cash</MenuItem>\r\n              <MenuItem value=\"Loan\">Loan</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n\r\n        \r\n          {purchaseMode === 'Loan' && (\r\n            <>\r\n              <TextField\r\n                label=\"Initial Amount\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                type=\"number\"\r\n                value={initialAmount}\r\n                onChange={(e) => setInitialAmount(e.target.value)}\r\n                variant=\"outlined\"\r\n              />\r\n              <TextField\r\n                label=\"Document Charge\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                type=\"number\"\r\n                value={documentCharge}\r\n                onChange={(e) => setDocumentCharge(e.target.value)}\r\n                variant=\"outlined\"\r\n              />\r\n              <FormControl fullWidth margin=\"normal\">\r\n                <InputLabel>Loan Provider</InputLabel>\r\n                <Select\r\n                  value={loanProvider}\r\n                  onChange={(e) => setLoanProvider(e.target.value)}\r\n                  fullWidth\r\n                >\r\n                  <MenuItem value=\"Velan Finance\">Velan Finance</MenuItem>\r\n                  <MenuItem value=\"PR finance\">PR finance</MenuItem>\r\n                  <MenuItem value=\"Illam thalir Finance\">Illam thalir finance</MenuItem>\r\n                  <MenuItem value=\"Bajaj\">Bajaji</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </>\r\n          )}\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button variant=\"contained\" color=\"primary\" fullWidth onClick={handleSalesProgress}>\r\n            Update Sales Progress\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </Grid> */}\r\n        \r\n        {/* <Grid item xs={12} sm={6} md={4}>\r\n          <Card variant=\"outlined\">\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>Stock Out</Typography>\r\n              <TextField\r\n                label=\"Stock Model\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                value={stockOutModel}\r\n                onChange={(e) => setStockOutModel(e.target.value)}\r\n                variant=\"outlined\"\r\n              />\r\n              <TextField\r\n                label=\"To\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                value={stockOutTo}\r\n                onChange={(e) => setStockOutTo(e.target.value)}\r\n                variant=\"outlined\"\r\n              />\r\n              <TextField\r\n                label=\"Quantity\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                value={salesAmount}\r\n                onChange={(e) => setSalesAmount(e.target.value)}\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n              />\r\n            </CardContent>\r\n            <CardActions>\r\n              <Button variant=\"contained\" color=\"primary\" fullWidth onClick={handleStockOut}>\r\n                Log Stock Out\r\n              </Button>\r\n            </CardActions>\r\n          </Card>\r\n        </Grid> */}\r\n\r\n        {/* Service Details Card */}\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <Card variant=\"outlined\">\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>Service Details</Typography>\r\n              <TextField\r\n                label=\"Customer Name\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                value={customerName}\r\n                onChange={(e) => setCustomerName(e.target.value)}\r\n                variant=\"outlined\"\r\n              />\r\n              <TextField\r\n                label=\"Customer Mobile\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                value={customerMobile}\r\n                onChange={(e) => setCustomerMobile(e.target.value)}\r\n                variant=\"outlined\"\r\n              />\r\n              <TextField\r\n                label=\"Mobile Model\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                value={mobileModel}\r\n                onChange={(e) => setMobileModel(e.target.value)}\r\n                variant=\"outlined\"\r\n              />\r\n              <FormControl fullWidth margin=\"normal\">\r\n  <InputLabel>Service Type</InputLabel>\r\n  <Select\r\n    label=\"Service Type\"\r\n    value={serviceType}\r\n    onChange={(e) => setServiceType(e.target.value)}\r\n    variant=\"outlined\"\r\n  >\r\n    <MenuItem value=\"Screen Replacement\">Screen Replacement</MenuItem>\r\n    <MenuItem value=\"Battery Replacement\">Battery Replacement</MenuItem>\r\n    <MenuItem value=\"Water Damage Repair\">Water Damage Repair</MenuItem>\r\n    <MenuItem value=\"Board Complaint\">Board Complaint</MenuItem>\r\n    <MenuItem value=\"Accessories repair\">Accessories Repair</MenuItem>\r\n    <MenuItem value=\"CC Board\">CC Board</MenuItem>\r\n  </Select>\r\n</FormControl>\r\n              <TextField\r\n                label=\"Estimated Amount\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                type=\"number\"\r\n                value={estimatedAmount}\r\n                onChange={(e) => setEstimatedAmount(e.target.value)}\r\n                variant=\"outlined\"\r\n              />\r\n              <TextField\r\n                label=\"Customer Address\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                value={customerAddress}\r\n                onChange={(e) => setCustomerAddress(e.target.value)}\r\n                variant=\"outlined\"\r\n              />\r\n              <TextField\r\n                label=\"Advance Amount\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                type=\"number\"\r\n                value={advanceAmount}\r\n                onChange={(e) => setAdvanceAmount(e.target.value)}\r\n                variant=\"outlined\"\r\n              />\r\n\r\n              <FormControl fullWidth margin=\"normal\">\r\n                <InputLabel>Password Type</InputLabel>\r\n                <Select\r\n                  value={passwordType}\r\n                  onChange={(e) => setPasswordType(e.target.value)}\r\n                  fullWidth\r\n                >\r\n                  <MenuItem value=\"Pin\">Pin</MenuItem>\r\n                  <MenuItem value=\"Password\">Password</MenuItem>\r\n                  <MenuItem value=\"Pattern\">Pattern</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n\r\n              {passwordType === \"Pin\" && (\r\n                <TextField\r\n                  label=\"Pin\"\r\n                  fullWidth\r\n                  margin=\"normal\"\r\n                  value={pin}\r\n                  onChange={(e) => setPin(e.target.value)}\r\n                  variant=\"outlined\"\r\n                />\r\n              )}\r\n              {passwordType === \"Password\" && (\r\n                <TextField\r\n                  label=\"Password\"\r\n                  fullWidth\r\n                  margin=\"normal\"\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                  variant=\"outlined\"\r\n                />\r\n              )}\r\n              {passwordType === \"Pattern\" && (\r\n                <TextField\r\n                  label=\"Pattern\"\r\n                  fullWidth\r\n                  margin=\"normal\"\r\n                  value={pattern}\r\n                  onChange={(e) => setPattern(e.target.value)}\r\n                  variant=\"outlined\"\r\n                />\r\n              )}\r\n              <TextField\r\n        label=\"Notes\"\r\n        fullWidth\r\n        margin=\"normal\"\r\n        multiline\r\n        rows={3}\r\n        value={notes}\r\n        onChange={(e) => setNotes(e.target.value)}\r\n        variant=\"outlined\"\r\n      />\r\n            </CardContent>\r\n            <CardActions>\r\n              <Button variant=\"contained\" color=\"primary\" fullWidth onClick={handleServiceDetails}>\r\n                Add Service\r\n              </Button>\r\n            </CardActions>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Box sx={{ marginTop: 2, textAlign: \"center\" }}>\r\n                    <IconButton color=\"primary\" onClick={handleSignOut}>\r\n                      <ExitToApp />\r\n                      <Typography variant=\"button\">Sign Out</Typography>\r\n                    </IconButton>\r\n                  </Box>\r\n    </Container>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default EmployeeDashboard; ","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M10.09 15.59 11.5 17l5-5-5-5-1.41 1.41L12.67 11H3v2h9.67zM19 3H5c-1.11 0-2 .9-2 2v4h2V5h14v14H5v-4H3v4c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2\"\n}), 'ExitToApp');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardActionsUtilityClass(slot) {\n  return generateUtilityClass('MuiCardActions', slot);\n}\nconst cardActionsClasses = generateUtilityClasses('MuiCardActions', ['root', 'spacing']);\nexport default cardActionsClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getCardActionsUtilityClass } from \"./cardActionsClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disableSpacing\n  } = ownerState;\n  const slots = {\n    root: ['root', !disableSpacing && 'spacing']\n  };\n  return composeClasses(slots, getCardActionsUtilityClass, classes);\n};\nconst CardActionsRoot = styled('div', {\n  name: 'MuiCardActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disableSpacing && styles.spacing];\n  }\n})({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 8,\n  variants: [{\n    props: {\n      disableSpacing: false\n    },\n    style: {\n      '& > :not(style) ~ :not(style)': {\n        marginLeft: 8\n      }\n    }\n  }]\n});\nconst CardActions = /*#__PURE__*/React.forwardRef(function CardActions(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardActions'\n  });\n  const {\n    disableSpacing = false,\n    className,\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    disableSpacing\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardActionsRoot, {\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    ...other\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardActions;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getIconButtonUtilityClass(slot) {\n  return generateUtilityClass('MuiIconButton', slot);\n}\nconst iconButtonClasses = generateUtilityClasses('MuiIconButton', ['root', 'disabled', 'colorInherit', 'colorPrimary', 'colorSecondary', 'colorError', 'colorInfo', 'colorSuccess', 'colorWarning', 'edgeStart', 'edgeEnd', 'sizeSmall', 'sizeMedium', 'sizeLarge']);\nexport default iconButtonClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport ButtonBase from \"../ButtonBase/index.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport iconButtonClasses, { getIconButtonUtilityClass } from \"./iconButtonClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disabled,\n    color,\n    edge,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', color !== 'default' && `color${capitalize(color)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`]\n  };\n  return composeClasses(slots, getIconButtonUtilityClass, classes);\n};\nconst IconButtonRoot = styled(ButtonBase, {\n  name: 'MuiIconButton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  textAlign: 'center',\n  flex: '0 0 auto',\n  fontSize: theme.typography.pxToRem(24),\n  padding: 8,\n  borderRadius: '50%',\n  color: (theme.vars || theme).palette.action.active,\n  transition: theme.transitions.create('background-color', {\n    duration: theme.transitions.duration.shortest\n  }),\n  variants: [{\n    props: props => !props.disableRipple,\n    style: {\n      '--IconButton-hoverBg': theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),\n      '&:hover': {\n        backgroundColor: 'var(--IconButton-hoverBg)',\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    }\n  }, {\n    props: {\n      edge: 'start'\n    },\n    style: {\n      marginLeft: -12\n    }\n  }, {\n    props: {\n      edge: 'start',\n      size: 'small'\n    },\n    style: {\n      marginLeft: -3\n    }\n  }, {\n    props: {\n      edge: 'end'\n    },\n    style: {\n      marginRight: -12\n    }\n  }, {\n    props: {\n      edge: 'end',\n      size: 'small'\n    },\n    style: {\n      marginRight: -3\n    }\n  }]\n})), memoTheme(({\n  theme\n}) => ({\n  variants: [{\n    props: {\n      color: 'inherit'\n    },\n    style: {\n      color: 'inherit'\n    }\n  }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()) // check all the used fields in the style below\n  .map(([color]) => ({\n    props: {\n      color\n    },\n    style: {\n      color: (theme.vars || theme).palette[color].main\n    }\n  })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()) // check all the used fields in the style below\n  .map(([color]) => ({\n    props: {\n      color\n    },\n    style: {\n      '--IconButton-hoverBg': theme.vars ? `rgba(${(theme.vars || theme).palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha((theme.vars || theme).palette[color].main, theme.palette.action.hoverOpacity)\n    }\n  })), {\n    props: {\n      size: 'small'\n    },\n    style: {\n      padding: 5,\n      fontSize: theme.typography.pxToRem(18)\n    }\n  }, {\n    props: {\n      size: 'large'\n    },\n    style: {\n      padding: 12,\n      fontSize: theme.typography.pxToRem(28)\n    }\n  }],\n  [`&.${iconButtonClasses.disabled}`]: {\n    backgroundColor: 'transparent',\n    color: (theme.vars || theme).palette.action.disabled\n  }\n})));\n\n/**\n * Refer to the [Icons](/material-ui/icons/) section of the documentation\n * regarding the available icon options.\n */\nconst IconButton = /*#__PURE__*/React.forwardRef(function IconButton(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiIconButton'\n  });\n  const {\n    edge = false,\n    children,\n    className,\n    color = 'default',\n    disabled = false,\n    disableFocusRipple = false,\n    size = 'medium',\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    edge,\n    color,\n    disabled,\n    disableFocusRipple,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(IconButtonRoot, {\n    className: clsx(classes.root, className),\n    centerRipple: true,\n    focusRipple: !disableFocusRipple,\n    disabled: disabled,\n    ref: ref,\n    ...other,\n    ownerState: ownerState,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? IconButton.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The icon to display.\n   */\n  children: chainPropTypes(PropTypes.node, props => {\n    const found = React.Children.toArray(props.children).some(child => /*#__PURE__*/React.isValidElement(child) && child.props.onClick);\n    if (found) {\n      return new Error(['MUI: You are providing an onClick event listener to a child of a button element.', 'Prefer applying it to the IconButton directly.', 'This guarantees that the whole <button> will be responsive to click events.'].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'default'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   * @default false\n   */\n  edge: PropTypes.oneOf(['end', 'start', false]),\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense button styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default IconButton;"],"names":["navigate","useNavigate","stockModel","setStockModel","useState","organization","setOrganization","salesDate","setSalesDate","salesAmount","setSalesAmount","stockOutModel","setStockOutModel","stockOutTo","setStockOutTo","salesModelSold","setSalesModelSold","salesRate","setSalesRate","purchaseMode","setPurchaseMode","loanProvider","setLoanProvider","initialAmount","setInitialAmount","documentCharge","setDocumentCharge","loanAmount","setLoanAmount","error","setError","username","setUsername","loading","setLoading","customerName","setCustomerName","customerMobile","setCustomerMobile","mobileModel","setMobileModel","serviceType","setServiceType","estimatedAmount","setEstimatedAmount","customerAddress","setCustomerAddress","notes","setNotes","passwordType","setPasswordType","pin","setPin","password","setPassword","pattern","setPattern","advanceAmount","setAdvanceAmount","resetError","useEffect","async","user","getAuth","currentUser","userDocRef","doc","db","uid","userDoc","getDoc","exists","userData","data","err","fetchEmployeeDetails","generateServiceId","concat","Date","now","handleSignOut","auth","signOut","_jsxs","Container","maxWidth","children","_jsx","Typography","variant","gutterBottom","align","sx","marginTop","Box","marginBottom","textAlign","IconButton","color","onClick","ExitToApp","Grid","container","spacing","item","xs","sm","md","Card","CardContent","TextField","label","fullWidth","margin","value","onChange","e","target","FormControl","InputLabel","Select","MenuItem","type","multiline","rows","CardActions","Button","serviceDetails","parseFloat","timestamp","Timestamp","serviceId","addDoc","collection","_objectSpread","alert","message","createSvgIcon","d","getCardActionsUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardActionsRoot","styled","name","overridesResolver","props","styles","ownerState","root","disableSpacing","display","alignItems","padding","variants","style","marginLeft","React","inProps","ref","useDefaultProps","className","other","_objectWithoutProperties","classes","slots","composeClasses","useUtilityClasses","clsx","getIconButtonUtilityClass","IconButtonRoot","ButtonBase","capitalize","edge","size","memoTheme","_ref","theme","flex","fontSize","typography","pxToRem","borderRadius","vars","palette","action","active","transition","transitions","create","duration","shortest","disableRipple","activeChannel","hoverOpacity","alpha","backgroundColor","marginRight","_ref2","Object","entries","filter","createSimplePaletteValueFilter","map","_ref3","main","_ref4","mainChannel","iconButtonClasses","disabled","disableFocusRipple","centerRipple","focusRipple"],"sourceRoot":""}